name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag to release (vX.Y.Z)'
        required: false

permissions:
  contents: write
  packages: read

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-publish:
    name: Build, Test, Publish Crate & GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Show toolchain
        run: rustc --version && cargo --version

      - name: Verify version consistency
        id: version
        run: |
          TAG_REF="${{ github.ref }}"
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.version }}" ]; then
            TAG_REF="refs/tags/${{ github.event.inputs.version }}"
          fi
          TAG_VERSION="${TAG_REF#refs/tags/}"
          echo "Detected tag: $TAG_VERSION"
          MANIFEST_VERSION=$(grep '^version =' Cargo.toml | head -1 | cut -d '"' -f2)
          echo "Manifest version: $MANIFEST_VERSION"
          if [ "$TAG_VERSION" != "v$MANIFEST_VERSION" ]; then
            echo "Tag ($TAG_VERSION) does not match Cargo.toml version (v$MANIFEST_VERSION)" >&2
            exit 1
          fi
          echo "version=$MANIFEST_VERSION" >> $GITHUB_OUTPUT

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build (release)
        run: cargo build --release

      - name: Package (cargo package)
        run: cargo package --no-verify

      - name: Check crates.io token presence
        id: tokencheck
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "Crates.io token NOT present; publish step will be skipped.";
            echo "has_token=false" >> $GITHUB_OUTPUT
          else
            echo "Crates.io token detected (masked).";
            echo "has_token=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to crates.io
        if: startsWith(github.ref, 'refs/tags/') && steps.tokencheck.outputs.has_token == 'true'
        run: |
          if [ -z "$CARGO_REGISTRY_TOKEN" ]; then
            echo "Token missing at publish step despite earlier detection." >&2
            exit 1
          fi
          cargo publish --no-verify

      - name: Skip publish (no token configured)
        if: startsWith(github.ref, 'refs/tags/') && steps.tokencheck.outputs.has_token != 'true'
        run: |
          echo "Skipping crate publish because CARGO_REGISTRY_TOKEN is not configured.";
          echo "Configure it under Settings > Secrets and rerun the workflow, or publish manually.";

      - name: Generate Release Notes
        id: notes
        run: |
          if [ -f "RELEASE_NOTES_v${{ steps.version.outputs.version }}.md" ]; then
            NOTES_FILE="RELEASE_NOTES_v${{ steps.version.outputs.version }}.md"
          else
            # Fallback: extract section from CHANGELOG
            NOTES_FILE=release_notes_extracted.md
            awk '/## \[${{ steps.version.outputs.version }}\]/{flag=1;next}/## \[/{if(flag){exit}}flag' CHANGELOG.md > "$NOTES_FILE" || true
          fi
          echo "notes_file=$NOTES_FILE" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: rustedbytes-counterlines v${{ steps.version.outputs.version }}
          body_path: ${{ steps.notes.outputs.notes_file }}
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload binary artifact
        if: steps.version.outputs.version != ''
        uses: actions/upload-artifact@v4
        with:
          name: rustedbytes-counterlines-${{ steps.version.outputs.version }}-x86_64-unknown-linux-gnu
          path: target/release/rustedbytes-counterlines
          if-no-files-found: error

  windows-binary:
    name: Build Windows Binary
    runs-on: windows-latest
    needs: build-and-publish
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build (release)
        run: cargo build --release

      - name: Upload artifact (exe)
        uses: actions/upload-artifact@v4
        with:
          name: rustedbytes-counterlines-${{ needs.build-and-publish.outputs.version }}-x86_64-pc-windows-msvc
          path: target/release/rustedbytes-counterlines.exe
          if-no-files-found: error
